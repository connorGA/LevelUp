<div class="calendar-container" style="position: fixed; top: 0; left: 0; width: 100vw; display: flex; justify-content: center; z-index: 1000; background-color: #f5f7fa; padding: 10px 0; border-bottom: 1px solid #ddd;">
  <div class="calendar" style="display: grid; grid-template-columns: repeat(12, minmax(0, 1fr)); gap: 5px; width: 100%; max-width: 100%; box-sizing: border-box;">
    <% @months.each do |month| %>
      <div class="calendar-month" style="background: white; padding: 10px; text-align: center; border: 1px solid #ddd; border-radius: 5px; display: flex; flex-direction: column; gap: 10px; box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);">
        <h5 style="margin: 0; font-size: 14px; color: #027efb;"><%= month[:name] %></h5>
        <div class="calendar-days" style="display: grid; grid-template-columns: repeat(7, 1fr); gap: 2px;">
          <% month[:days].each do |day| %>
            <div class="calendar-day" style="margin: 2px; padding: 5px; text-align: center; font-size: 12px; background: #f9f9f9; border: 1px solid #ccc; border-radius: 3px; color: #333;">
              <%= day[:number] %>
            </div>
          <% end %>
        </div>
      </div>
    <% end %>
  </div>
</div>


<div id="task-list">
  <% if @tasks.any? %>
    <% @tasks.each do |task| %>
      <div class="task">
        <div class="task-header">
          <h3 class="task-title"><%= task.name %></h3>
          <span class="task-frequency"><%= task.frequency.capitalize %></span>
        </div>
        <p class="task-description"><%= task.description %></p>
        
        <!-- Conditionally Display Duration Based on Duration Type -->
        <p class="task-duration">
          Duration:
          <% if task.duration_type == "timed" %>
            <%= task.duration %> minutes
          <% else %>
            Complete/Incomplete
          <% end %>
        </p>
        
        <p class="task-status">Status: <%= task.completed ? "Completed" : "Pending" %></p>
        <p class="task-exp">EXP Reward: <%= task.calculate_exp %></p>

        <!-- Edit Button -->
        <button data-task-id="<%= task.id %>" class="edit-task">Edit</button>

        <!-- Delete Button -->
        <button data-task-id="<%= task.id %>" class="delete-task">Delete</button>

        <% if task.completed %>
          <button data-task-id="<%= task.id %>" class="reset-task action-button">Reset Task</button>
        <% else %>
          <button data-task-id="<%= task.id %>" class="complete-task action-button">Complete Task</button>
        <% end %>
      </div>
    <% end %>
  <% else %>
    <p class="no-tasks">No tasks available. Create a new task to get started!</p>
  <% end %>
</div>

<div class= "create-col">
  <h2 class="form-title">Create a New Task</h2>
  <form id="new-task-form" class="task-form">
    <input type="text" name="task[name]" placeholder="Task Name" required>
    <textarea name="task[description]" placeholder="Task Description" class="input-field"></textarea>

    <!-- Duration Type Selection -->
    <label for="task_duration_type">Duration Type:</label>
    <select name="task[duration_type]" id="task_duration_type" required>
      <option value="timed">Timed</option>
      <option value="binary">Binary (Complete/Incomplete)</option>
    </select>

    <!-- Duration Input (only shown if "Timed" is selected) -->
    <div id="duration_input" style="display: none;">
      <input type="number" name="task[duration]" placeholder="Duration (minutes)">
    </div>

    <select name="task[frequency]" class="input-field" required>
      <option value="daily">Daily</option>
      <option value="weekly">Weekly</option>
      <option value="monthly">Monthly</option>
      <option value="yearly">Yearly</option>
    </select>
    <button type="submit" class="submit-button">Create Task</button>
  </form>
</div>

<div id="messages" class="messages"></div>

<script>
// Calendar
document.addEventListener("DOMContentLoaded", () => {
  const currentDate = new Date();
  const dayElements = document.querySelectorAll(".calendar-day");

  dayElements.forEach((day) => {
    const dayNumber = parseInt(day.textContent, 10);
    const monthElement = day.closest(".calendar-month");

    const currentMonth = currentDate.toLocaleString("default", { month: "long" }).toLowerCase();
    const isCurrentMonth = monthElement.classList.contains(currentMonth);

    if (isCurrentMonth && dayNumber === currentDate.getDate()) {
      day.classList.add("current-day");
    }
  });
});

// Create a new task
document.getElementById("new-task-form").addEventListener("submit", function(event) {
  if (!<%= user_signed_in? %>) {
    alert("Please sign in to create tasks.");
    window.location.href = "<%= new_user_session_path %>";
    return;
  }
  event.preventDefault();

  const formData = new FormData(event.target);
  const taskData = {};

  // Reformat formData to match expected keys (e.g., name instead of task[name])
  formData.forEach((value, key) => {
    taskData[key.replace("task[", "").replace("]", "")] = value;
  });

  fetch("/tasks", {
    method: "POST",
    headers: { 
      "X-CSRF-Token": document.querySelector("meta[name='csrf-token']").content,
      "Content-Type": "application/json"
    },
    body: JSON.stringify({
      task: taskData
    })
  })
  .then(response => response.json())
  .then(data => {
    if (data.task) {
      document.getElementById("messages").textContent = data.message;
      location.reload(); // Refresh to show the new task
    } else {
      document.getElementById("messages").innerHTML = data.errors.map(error => `<p>${error}</p>`).join("");
    }
  });
});


// Handle task completion
document.querySelectorAll(".complete-task").forEach(button => {
  button.addEventListener("click", () => {
    const taskId = button.dataset.taskId;

    fetch(`/tasks/${taskId}/complete`, {
      method: "POST",
      headers: { "X-CSRF-Token": document.querySelector("meta[name='csrf-token']").content }
    })
    .then(response => response.json())
    .then(data => {
      if (data.task) {
        document.getElementById("messages").textContent = data.message;
        location.reload();
      } else {
        document.getElementById("messages").textContent = data.error;
      }
    });
  });
});

// Handle task reset
document.querySelectorAll(".reset-task").forEach(button => {
  button.addEventListener("click", () => {
    const taskId = button.dataset.taskId;

    fetch(`/tasks/${taskId}/reset`, {
      method: "POST",
      headers: { "X-CSRF-Token": document.querySelector("meta[name='csrf-token']").content }
    })
    .then(response => response.json())
    .then(data => {
      if (data.task) {
        document.getElementById("messages").textContent = data.message;
        location.reload();
      } else {
        document.getElementById("messages").textContent = data.error;
      }
    });
  });
});

// Handle task edit
document.querySelectorAll(".edit-task").forEach(button => {
  button.addEventListener("click", () => {
    const taskId = button.dataset.taskId;
    const newTitle = prompt("Enter new task title:") || "";
    const newDescription = prompt("Enter new task description:") || "";
    const newDuration = prompt("Enter new duration (in minutes):") || "";

    fetch(`/tasks/${taskId}`, {
      method: "PATCH",
      headers: {
        "Content-Type": "application/json",
        "X-CSRF-Token": document.querySelector("meta[name='csrf-token']").content
      },
      body: JSON.stringify({
        task: {
          name: newTitle,
          description: newDescription,
          duration: newDuration
        }
      })
    })
    .then(response => response.json())
    .then(data => {
      if (data.task) {
        alert("Task updated successfully!");
        location.reload();
      } else {
        alert("Error: " + data.errors.join(", "));
      }
    });
  });
});

// Handle task delete
document.querySelectorAll(".delete-task").forEach(button => {
  button.addEventListener("click", () => {
    const taskId = button.dataset.taskId;

    if (confirm("Are you sure you want to delete this task?")) {
      fetch(`/tasks/${taskId}`, {
        method: "DELETE",
        headers: {
          "X-CSRF-Token": document.querySelector("meta[name='csrf-token']").content
        }
      })
      .then(response => response.json())
      .then(data => {
        alert(data.message);
        location.reload();
      });
    }
  });
});

// Show/hide duration input based on duration type
document.getElementById("task_duration_type").addEventListener("change", function() {
  const durationInput = document.getElementById("duration_input");
  durationInput.style.display = this.value === "timed" ? "block" : "none";
});
</script>
